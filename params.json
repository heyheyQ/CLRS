{"name":"CLRS","tagline":"Implementation of algorithms in Introduction to Algorithms, 3rd ed (CLRS) in C language","body":"## Insertion sort\r\n  + Implement insertion sort to sort an array in either ascending or descending order\r\n  + Implement insertion sort using binary-search to find where to insert an element\r\n  + Find the unique locally maximum element A[m] such that A[m-1] < A[m] and A[m+1] < A[m] in an array A[1..n] (array A is unimodal)\r\n\r\n## Divide and Conquer\r\n  + Maximum subarray problem:\r\n    - Recursively finds the maximum-subarray which has the greatest sum of any contiguous subarray of the given array\r\n  + The Strassen's method of martix multiplication:\r\n    - Improve the recursive version of two-square-matrices multiplication; the method reduces the number of recursive multiplications from eight to seven.\r\n  \r\n## Heapsort\r\n  + In a max-heap, the max-heap property is that for every node i other than the root, A[parent(i)] >= A[i].\r\n    - Maintain the max-heap property of an array in recursion\r\n    - Implement the build-max-heap procedure which produces a max-heap from an unordered input array\r\n    - Implement the heapsort procedure which runs in O(nlgn) time to sort an array in place\r\n  + Implement a priority-queue using heapsort\r\n  + Merge k sorted lists into one sorted list using a min-heap\r\n\r\n## Quicksort\r\n  + Implement quicksort in a divide-and-conquer fashion\r\n  + Implement a randomized version of quicksort with the pivot element to partition the array randomly chosen\r\n  + Implement an iterative version of quicksort to avoid stack overflow\r\n\r\n## Medians and Order Statistics\r\n  + Find the median of all 2n elements in arrays X and Y\r\n  + Find the weighted median:\r\n    - The weighted median is the element xk satisfying sum(wi, xi<xk) < 1/2 and sum(wi, xi>xk) <= 1/2, wi is the corresponding weight of element xi in array x[1..n].\r\n  + Select the ith smallest of n elements\r\n  + List the kth quantiles of a set using randomized select functions:\r\n    - The kth quantiles of an n-element set are the k-1 order statistics that divide the sorted set into k equal-sized sets. \r\n  + Determine the k numbers in S that are closest to the median of S, using randomized select functions\r\n\r\n## Binary Search Trees\r\n  + Perform an inorder tree walk in a non-recursive fashion\r\n  + Perform preorder and postorder tree walks in a recursive fashion\r\n  + Search for a key stored in a binary search tree\r\n  + Maintain the binary-search-tree property with the Transplant procedure which replaces one subtree as a child of its parent with another subtree\r\n  + Search for and delete the key from the tree\r\n  + Insert the key to the tree\r\n\r\n## Red-Black Trees\r\n  + Implements rotation operations which are local operations in a search tree that preserves the binary-search-tree property\r\n  + Insert/delete a node into/from an n-node red-black tree\r\n  + Operate a persistent binary search tree by maintaining past versions of the tree\r\n  + Implement an AVL tree:\r\n    - For each node x in an AVL tree, the heights of the left and right subtrees of x differ by at most 1.\r\n\r\n## Dynamic Programming\r\n  + Solve rod-cutting problem to maximize obtainable revenue rn by cutting up the rod and selling the pieces\r\n  + Solve the problem of matrix-chain multiplication to minimize cost of evaluating the product\r\n  + Given two character strings X = {x1, x2, ..., xm} and Y = {y1, y2, ..., yn}, solve the longest common subsequence problem\r\n  + Solve the problem of optimal binary search trees:\r\n    - Construct a binary search tree whose expected search cost is smallest, with each key ki having a probability pi\r\n  + Find the longest monotonically increasing subsequence of a sequence of n numbers\r\n    - A brute force method\r\n    - A dynamic programming method\r\n  + Find longest palindrome subsequence of a given input string\r\n  + Print the given paragraph neatly on a number of lines that hold a maximum of M characters each\r\n  + Subset-sum problem:\r\n    - Decide whether there exists a subset of S = {x1, x2, ..., xn} that adds up exactly to the target value t\r\n    - A brute force method\r\n    - A dynamic programming method","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}